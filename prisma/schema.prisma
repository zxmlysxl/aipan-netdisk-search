// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --name add_resource_table

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  // binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // 添加这一行
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)

  resources     Resource[] // 一个用户可以有多个资源
  resourceTypes ResourceType[] // 一个用户可以创建多种资源类型
  Post          Post[]
  Alist         Alist[]
}

model ResourceType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  resources Resource[] // 一个资源类型可以对应多个资源
  creatorId Int
  creator   User       @relation(fields: [creatorId], references: [id])
}

model Resource {
  id        Int      @id @default(autoincrement())
  name      String
  links     String // 资源链接
  typeId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int

  creator User         @relation(fields: [creatorId], references: [id])
  type    ResourceType @relation(fields: [typeId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  content   String   @db.Text // 文章内容
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int

  categories PostToCategory[]

  creator User @relation(fields: [creatorId], references: [id])
}

model PostCategory {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  posts PostToCategory[] // 使用中间表实现多对多关系
}

// 中间表，用于表示文章和分类的多对多关系
model PostToCategory {
  postId     Int
  categoryId Int

  post     Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  category PostCategory @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId]) // 组合主键，确保唯一性
}

model Alist {
  id        Int      @id @default(autoincrement())
  name      String
  link      String // alist 源链接
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int

  creator User @relation(fields: [creatorId], references: [id])
}
